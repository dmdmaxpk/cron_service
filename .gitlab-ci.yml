stages:
  - build
  - staging
  - production

variables:
  DEPLOYMENT_NAME: cron
  DOCKER_REGISTRY: 652891063711.dkr.ecr.eu-central-1.amazonaws.com/$DEPLOYMENT_NAME

build:
  stage: build
  image: docker:19.03.1
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.1-dind
  before_script:
    - docker info
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
  script:
    - $(aws ecr get-login --no-include-email --region eu-central-1)
    - docker build -t $DOCKER_REGISTRY:$CI_COMMIT_TAG .
    - docker push $DOCKER_REGISTRY:$CI_COMMIT_TAG
  only:
    - tags

.kubectl_config: &kubectl_config
  - aws eks --region eu-central-1 update-kubeconfig --name goonj-v2

staging:
  image: docker.io/sulemanhasib43/eks:latest
  stage: staging
  variables:
    K8S_NAMESPACE: staging
  before_script: *kubectl_config
  script:
    - kubectl version
    - kubectl -n $K8S_NAMESPACE patch deployment $DEPLOYMENT_NAME -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$DEPLOYMENT_NAME"'","image":"'"$DOCKER_REGISTRY:$CI_COMMIT_TAG"'"}]}}}}'
  only:
    - tags

# # Depends on CLOUDSDK_CORE_PROJECT, CLOUDSDK_CONTAINER_CLUSTER, and CLOUDSDK_COMPUTE_ZONE being set
# .gcloud: &gcloud
#   - echo $GCLOUD_SERVICE_KEY | base64 --decode -i > ~/gcloud-service-key.json
#   - gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
#   - gcloud --quiet container clusters get-credentials $CLOUDSDK_CONTAINER_CLUSTER

# .prod_deploy: &prod_deploy
#   image: google/cloud-sdk
#   stage: production
#   environment: production
#   before_script: *gcloud
#   script:
#     - kubectl patch deployment $PRODUCTION_SERVICE_NAME -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$PRODUCTION_SERVICE_NAME"'","image":"'"$CI_REGISTRY_IMAGE:$CI_BUILD_REF"'"}]}}}}'

# .staging_deploy: &staging_deploy
#   image: google/cloud-sdk
#   stage: staging
#   environment: staging
#   before_script: *gcloud
#   script:
#     - kubectl patch deployment $STAGING_SERVICE_NAME -p '{"spec":{"template":{"spec":{"containers":[{"name":"'"$STAGING_SERVICE_NAME"'","image":"'"$CI_REGISTRY_IMAGE:$CI_BUILD_REF"'"}]}}}}'

# auto-deploy-master:
#   <<: *staging_deploy
#   only:
#     - master

# auto-deploy-tags:
#   <<: *prod_deploy
#   only:
#     - tags

# deploy to staging:
#   <<: *staging_deploy
#   when: manual
#   except:
#     - master
#     - tags

# deploy to production:
#   <<: *prod_deploy
#   when: manual
#   only:
#     - master
